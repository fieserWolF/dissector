; Source generated by dissector v1.00 [21.08.2021] *** by fieserWolF
; FILENAME: test.prg, address: $2000, offset: $1002, length: $0500
;---------------------------------------------------------------------------

memory:

$2000  d8 ad 11 d0 10 fb ad 11  d0 30 fb ad 11 d0 29 ef 
$2010  8d 11 d0 a9 00 8d 15 d0  a9 00 8d 20 d0 20 f4 20 
$2020  a9 00 8d 6f 20 20 70 20  20 c3 22 20 e5 22 20 2a 
$2030  23 ad 11 d0 09 10 8d 11  d0 20 00 24 a9 ff a9 00 
$2040  8d ff 7f a9 50 cd 12 d0  d0 fb 20 24 21 ad 6f 20 
$2050  f0 f1 ad 11 d0 10 fb ad  11 d0 30 fb ad 11 d0 29 
$2060  ef 8d 11 d0 4c 64 20 a9  00 8d 6f 20 4c 43 20 00 
$2070  20 cc 20 20 e0 20 20 a1  20 20 80 20 20 31 21 60 
$2080  a9 08 8d 22 d0 a9 0a 8d  23 d0 78 a9 02 8d 00 dd 
$2090  58 a9 02 8d 18 d0 a9 0b  8d 11 d0 a9 18 8d 16 d0 
$20a0  60 a9 0f a2 00 9d 00 d8  9d 00 d9 9d 00 da 9d e8 
$20b0  da ca d0 f1 60 ae 22 21  bd c8 20 8d c5 20 bd ca 
$20c0  20 8d c6 20 20 ff ff 60  cc e0 20 20 a9 ff a2 00 
$20d0  9d 00 40 9d 00 41 9d 00  42 9d e8 42 ca d0 f1 60 
$20e0  a9 ff a2 00 9d 00 44 9d  00 45 9d 00 46 9d e8 46 
$20f0  ca d0 f1 60 a9 00 aa a8  20 00 10 60 05 07 22 22 
$2100  22 22 22 22 22 e8 e8 e8  e8 e8 e8 e8 00 00 00 00 
$2110  00 00 00 01 01 01 01 01  01 01 01 00 00 00 00 00 
$2120  00 00 00 00 20 51 21 20  b5 20 20 c1 21 20 31 21 
$2130  60 ac fc 20 ae 22 21 b9  49 21 1d 4f 21 8d 23 21 
$2140  ad 22 21 49 01 8d 22 21  60 02 04 06 08 0a 0c 00 
$2150  10 ce bf 21 10 0f a9 02  8d bf 21 ce fc 20 10 05 
$2160  a9 05 8d fc 20 ae fc 20  bd 84 3f 8d 1e 22 bd 8a 
$2170  3f 8d 1f 22 bd 90 3f 8d  24 22 bd 96 3f 8d 25 22 
$2180  ce fd 20 10 39 a9 07 8d  fd 20 a2 00 bd 1a 21 f0 
$2190  28 de fe 20 bd fe 20 c9  1c d0 05 a9 01 9d 1b 21 
$21a0  bd fe 20 10 14 a9 22 9d  fe 20 a9 e8 9d 05 21 a9 
$21b0  00 9d 0c 21 a9 01 9d 13  21 e8 e0 07 d0 ce 60 03 
$21c0  00 a2 00 8e 0c 22 bd 1a  21 f0 40 bd fe 20 8d 07 
$21d0  22 bd 13 21 f0 1a de 05  21 bd 05 21 c9 ff d0 10 
$21e0  de 0c 21 10 0b a9 00 9d  13 21 9d 05 21 9d 0c 21 
$21f0  18 a9 00 7d 05 21 8d 02  22 a9 35 7d 0c 21 8d 03 
$2200  22 ae ff ff a0 00 a9 ff  20 13 22 a2 00 e8 e0 07 
$2210  d0 b1 60 8d 59 22 8e 92  22 8a 29 07 aa bd ff ff 
$2220  8d 6a 22 bd ff ff 8d 6b  22 98 4a 6e 92 22 4a 6e 
$2230  92 22 4a 6e 92 22 ae 22  21 bd 93 22 8d 56 22 bd 
$2240  95 22 8d 57 22 bd 97 22  8d 5e 22 bd 99 22 8d 5f 
$2250  22 ae 92 22 18 bd ff ff  69 00 8d 6d 22 bd ff ff 
$2260  69 00 8d 6e 22 a0 07 a2  04 bd ff ff 9d ff ff ca 
$2270  10 f7 18 ad 6a 22 69 05  8d 6a 22 90 03 ee 6b 22 
$2280  18 ad 6d 22 69 28 8d 6d  22 90 03 ee 6e 22 88 10 
$2290  d6 60 00 4c 80 36 36 66  9a 36 36 00 00 00 00 00 
$22a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
$22b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
$22c0  00 00 00 a9 0f 8d 15 d0  a9 ff 8d 1c d0 a9 ff 8d 
$22d0  17 d0 8d 1d d0 a9 00 8d  1b d0 a9 05 8d 25 d0 a9 
$22e0  0d 8d 26 d0 60 a2 07 bd  11 23 9d a3 22 bd 19 23 
$22f0  9d ab 22 bd 21 23 9d b3  22 ad 29 23 9d bb 22 bd 
$2300  09 23 9d 9b 22 ca 10 df  60 e0 e1 e2 e3 e4 e5 e6 
$2310  e7 32 47 bc d1 00 00 00  00 28 28 18 18 28 28 28 
$2320  28 01 01 00 00 01 01 01  01 03 a9 00 8d 6a 23 a0 
$2330  00 a2 00 bd 9b 22 9d f8  43 9d f8 47 bd bb 22 9d 
$2340  27 d0 bd a3 22 99 01 d0  bd ab 22 99 00 d0 bd b3 
$2350  22 f0 09 ad 6a 23 1d 6b  23 8d 6a 23 c8 c8 e8 e0 
$2360  08 d0 d0 ad 6a 23 8d 10  d0 60 00 01 02 04 08 10 
$2370  20 40 80 ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$2380  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$2390  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$23a0  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$23b0  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$23c0  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$23d0  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$23e0  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$23f0  ea ea ea ea ea ea ea ea  ea ea ea ea ea ea ea ea 
$2400  78 a9 35 85 01 a9 7f 8d  0d dc 8d 0d dd ad 0d dc 
$2410  ad 0d dd a9 01 8d 1a d0  8d 19 d0 ad 11 d0 29 7f 
$2420  8d 11 d0 a9 34 8d 12 d0  a9 34 8d fe ff a9 24 8d 
$2430  ff ff 58 60 8d 72 24 8e  74 24 8c 76 24 ce 19 d0 
$2440  ad 23 21 8d 18 d0 a9 ff  8d 15 d0 a2 04 ca d0 fd 
$2450  a9 0d 8d 21 d0 a2 09 ca  10 fd a9 00 8d 21 d0 20 
$2460  03 10 a9 e6 8d 12 d0 a9  78 8d fe ff a9 24 8d ff 
$2470  ff a9 00 a2 00 a0 00 40  8d b3 24 8e b5 24 8c b7 
$2480  24 ce 19 d0 a2 05 ca 10  fd a9 0d 8d 21 d0 a2 08 
$2490  ca 10 fd a9 05 8d 21 d0  ad 16 d0 29 78 0d fd 20 
$24a0  8d 16 d0 a9 f6 8d 12 d0  a9 b9 8d fe ff a9 24 8d 
$24b0  ff ff a9 00 a2 00 a0 00  40 8d ef 24 8e f1 24 8c 
$24c0  f3 24 ce 19 d0 ad 11 d0  09 08 8d 11 d0 a2 14 ca 
$24d0  10 fd ad 11 d0 29 f7 8d  11 d0 a9 00 8d 15 d0 a9 
$24e0  31 8d 12 d0 a9 34 8d fe  ff a9 24 8d ff ff a9 00 
$24f0  a2 00 a0 00 40 ea ea ea  ea ea ea ea ea ea ea ea 





disassembly:

			* = $2000

			cld						;$2000	d8			2cycles 
code_000
			lda VIC_SCROLY_000		;$2001	ad 11 d0	4cycles load from $d011 [controlregister 1]
			bpl code_000			;$2004	10 fb		2+cycles conditional branch to $2001 [user program]

code_001
			lda VIC_SCROLY_000		;$2006	ad 11 d0	4cycles load from $d011 [controlregister 1]
			bmi code_001			;$2009	30 fb		2+cycles conditional branch to $2006 [user program]

			lda VIC_SCROLY_000		;$200b	ad 11 d0	4cycles load from $d011 [controlregister 1]
			and #$ef				;$200e	29 ef		2cycles 
			sta VIC_SCROLY_000		;$2010	8d 11 d0	4cycles store at $d011 [controlregister 1]
			lda #$00				;$2013	a9 00		2cycles 
			sta VIC_SPENA_001		;$2015	8d 15 d0	4cycles store at $d015 [enable sprites, 1   on]
			lda #$00				;$2018	a9 00		2cycles 
			sta VIC_EXTCOL_002		;$201a	8d 20 d0	4cycles store at $d020 [border color]
			jsr code_002			;$201d	20 f4 20	6cycles jump to & return from $20f4 [user program]

			lda #$00				;$2020	a9 00		2cycles 
			sta code_003			;$2022	8d 6f 20	4cycles store at $206f [user program]
			jsr code_004			;$2025	20 70 20	6cycles jump to & return from $2070 [user program]

			jsr code_005			;$2028	20 c3 22	6cycles jump to & return from $22c3 [user program]

			jsr code_006			;$202b	20 e5 22	6cycles jump to & return from $22e5 [user program]

			jsr code_007+1			;$202e	20 2a 23	6cycles jump to & return from $232a [user program]

			lda VIC_SCROLY_000		;$2031	ad 11 d0	4cycles load from $d011 [controlregister 1]
			ora #$10				;$2034	09 10		2cycles 
			sta VIC_SCROLY_000		;$2036	8d 11 d0	4cycles store at $d011 [controlregister 1]
			jsr code_008			;$2039	20 00 24	6cycles jump to & return from $2400 [user program]

			lda #$ff				;$203c	a9 ff		2cycles 
			lda #$00				;$203e	a9 00		2cycles 
			sta $7fff				;$2040	8d ff 7f	4cycles 
code_011
			lda #$50				;$2043	a9 50		2cycles 
code_009
			cmp VIC_RASTER_003		;$2045	cd 12 d0	4cycles load from $d012 [line to generate IRQ]
			bne code_009			;$2048	d0 fb		2+cycles conditional branch to $2045 [user program]

			jsr code_010			;$204a	20 24 21	6cycles jump to & return from $2124 [user program]

			lda code_003			;$204d	ad 6f 20	4cycles load from $206f [user program]
			beq code_011			;$2050	f0 f1		2+cycles conditional branch to $2043 [user program]

code_012
			lda VIC_SCROLY_000		;$2052	ad 11 d0	4cycles load from $d011 [controlregister 1]
			bpl code_012			;$2055	10 fb		2+cycles conditional branch to $2052 [user program]

code_013
			lda VIC_SCROLY_000		;$2057	ad 11 d0	4cycles load from $d011 [controlregister 1]
			bmi code_013			;$205a	30 fb		2+cycles conditional branch to $2057 [user program]

			lda VIC_SCROLY_000		;$205c	ad 11 d0	4cycles load from $d011 [controlregister 1]
			and #$ef				;$205f	29 ef		2cycles 
			sta VIC_SCROLY_000		;$2061	8d 11 d0	4cycles store at $d011 [controlregister 1]
code_014
			jmp code_014			;$2064	4c 64 20	3cycles jump to $2064 [user program]
;------------------------------------

			lda #$00				;$2067	a9 00		2cycles 
			sta code_003			;$2069	8d 6f 20	4cycles store at $206f [user program]
			jmp code_011			;$206c	4c 43 20	3cycles jump to $2043 [user program]
;------------------------------------

code_003
			brk						;$206f	00			7cycles 
;------------------------------------

code_004
			jsr code_015+1			;$2070	20 cc 20	6cycles jump to & return from $20cc [user program]

			jsr code_016			;$2073	20 e0 20	6cycles jump to & return from $20e0 [user program]

			jsr code_017			;$2076	20 a1 20	6cycles jump to & return from $20a1 [user program]

			jsr code_018			;$2079	20 80 20	6cycles jump to & return from $2080 [user program]

			jsr code_019			;$207c	20 31 21	6cycles jump to & return from $2131 [user program]

			rts						;$207f	60			6cycles 
;------------------------------------

code_018
			lda #$08				;$2080	a9 08		2cycles 
			sta VIC_BGCOL1_004		;$2082	8d 22 d0	4cycles store at $d022 [backgroundcolor 1]
			lda #$0a				;$2085	a9 0a		2cycles 
			sta VIC_BGCOL2_005		;$2087	8d 23 d0	4cycles store at $d023 [backgroundcolor 2]
			sei						;$208a	78			2cycles 
			lda #$02				;$208b	a9 02		2cycles 
			sta CIA2_CI2PRA_000		;$208d	8d 00 dd	4cycles store at $dd00 [data register port A]
			cli						;$2090	58			2cycles 
			lda #$02				;$2091	a9 02		2cycles 
			sta VIC_VMCSB_006		;$2093	8d 18 d0	4cycles store at $d018 [addresses of CHARROM and videomatrix]
			lda #$0b				;$2096	a9 0b		2cycles 
			sta VIC_SCROLY_000		;$2098	8d 11 d0	4cycles store at $d011 [controlregister 1]
			lda #$18				;$209b	a9 18		2cycles 
			sta VIC_SCROLX_007		;$209d	8d 16 d0	4cycles store at $d016 [controlregister2]
			rts						;$20a0	60			6cycles 
;------------------------------------

code_017
			lda #$0f				;$20a1	a9 0f		2cycles 
			ldx #$00				;$20a3	a2 00		2cycles 
code_020
			sta RAM_COLRAM_000,x	;$20a5	9d 00 d8	5cycles store at $d800 [color RAM area for screen]
			sta RAM_COLRAM_001,x	;$20a8	9d 00 d9	5cycles store at $d900 [color RAM area for screen]
			sta RAM_COLRAM_002,x	;$20ab	9d 00 da	5cycles store at $da00 [color RAM area for screen]
			sta RAM_COLRAM_003,x	;$20ae	9d e8 da	5cycles store at $dae8 [color RAM area for screen]
			dex						;$20b1	ca			2cycles 
			bne code_020			;$20b2	d0 f1		2+cycles conditional branch to $20a5 [user program]

			rts						;$20b4	60			6cycles 
;------------------------------------

code_029
			ldx code_021			;$20b5	ae 22 21	4cycles load from $2122 [user program]
			lda code_022,x			;$20b8	bd c8 20	4+cycles load from $20c8 [user program]
			sta code_023+1			;$20bb	8d c5 20	4cycles store at $20c5 [user program]
			lda code_024+2,x		;$20be	bd ca 20	4+cycles load from $20ca [user program]
			sta code_025+2			;$20c1	8d c6 20	4cycles store at $20c6 [user program]
code_023
code_025
			jsr KERNAL_VECIRQ_000	;$20c4	20 ff ff	6cycles jump to & return from $ffff [Vector: IRQ]

			rts						;$20c7	60			6cycles 
;------------------------------------

code_022
code_024
			cpy code_016			;$20c8	cc e0 20	4cycles load from $20e0 [user program]
code_015
			jsr KERNAL_CIOUT_001	;$20cb	20 a9 ff	6cycles jump to & return from $ffa9 [Handshake Serial Byte Out]

			ldx #$00				;$20ce	a2 00		2cycles 
code_026
			sta $4000,x				;$20d0	9d 00 40	5cycles 
			sta $4100,x				;$20d3	9d 00 41	5cycles 
			sta $4200,x				;$20d6	9d 00 42	5cycles 
			sta $42e8,x				;$20d9	9d e8 42	5cycles 
			dex						;$20dc	ca			2cycles 
			bne code_026			;$20dd	d0 f1		2+cycles conditional branch to $20d0 [user program]

			rts						;$20df	60			6cycles 
;------------------------------------

code_016
			lda #$ff				;$20e0	a9 ff		2cycles 
			ldx #$00				;$20e2	a2 00		2cycles 
code_027
			sta $4400,x				;$20e4	9d 00 44	5cycles 
			sta $4500,x				;$20e7	9d 00 45	5cycles 
			sta $4600,x				;$20ea	9d 00 46	5cycles 
			sta $46e8,x				;$20ed	9d e8 46	5cycles 
			dex						;$20f0	ca			2cycles 
			bne code_027			;$20f1	d0 f1		2+cycles conditional branch to $20e4 [user program]

			rts						;$20f3	60			6cycles 
;------------------------------------

code_002
			lda #$00				;$20f4	a9 00		2cycles 
			tax						;$20f6	aa			2cycles 
			tay						;$20f7	a8			2cycles 
			jsr $1000				;$20f8	20 00 10	6cycles jump to & return from

			rts						;$20fb	60			6cycles 
;------------------------------------

code_031
code_041
			ora ZERO_CHARAC_000		;$20fc	05 07		3cycles load from $0007 [Search character/temporary integer during INT, OR and AND]
code_045
			kil						;$20fe	22			0cycles illegal opcode [$22]
			kil						;$20ff	22			0cycles illegal opcode [$22]
			kil						;$2100	22			0cycles illegal opcode [$22]
			kil						;$2101	22			0cycles illegal opcode [$22]
			kil						;$2102	22			0cycles illegal opcode [$22]
			kil						;$2103	22			0cycles illegal opcode [$22]
			kil						;$2104	22			0cycles illegal opcode [$22]
code_048
			inx						;$2105	e8			2cycles 
			inx						;$2106	e8			2cycles 
			inx						;$2107	e8			2cycles 
			inx						;$2108	e8			2cycles 
			inx						;$2109	e8			2cycles 
			inx						;$210a	e8			2cycles 
			inx						;$210b	e8			2cycles 
code_049
			brk						;$210c	00			7cycles 
;------------------------------------

			brk						;$210d	00			7cycles 
;------------------------------------

			brk						;$210e	00			7cycles 
;------------------------------------

			brk						;$210f	00			7cycles 
;------------------------------------

			brk						;$2110	00			7cycles 
;------------------------------------

			brk						;$2111	00			7cycles 
;------------------------------------

			brk						;$2112	00			7cycles 
;------------------------------------

code_050
			ora (ZERO_R6510_001,x)	;$2113	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
			ora (ZERO_R6510_001,x)	;$2115	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
			ora (ZERO_R6510_001,x)	;$2117	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
code_043
			ora (ZERO_R6510_001,x)	;$2119	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
code_047
			brk						;$211b	00			7cycles 
;------------------------------------

			brk						;$211c	00			7cycles 
;------------------------------------

			brk						;$211d	00			7cycles 
;------------------------------------

			brk						;$211e	00			7cycles 
;------------------------------------

			brk						;$211f	00			7cycles 
;------------------------------------

			brk						;$2120	00			7cycles 
;------------------------------------

			brk						;$2121	00			7cycles 
;------------------------------------

code_021
			brk						;$2122	00			7cycles 
;------------------------------------

code_034
			brk						;$2123	00			7cycles 
;------------------------------------

code_010
			jsr code_028			;$2124	20 51 21	6cycles jump to & return from $2151 [user program]

			jsr code_029			;$2127	20 b5 20	6cycles jump to & return from $20b5 [user program]

			jsr code_030			;$212a	20 c1 21	6cycles jump to & return from $21c1 [user program]

			jsr code_019			;$212d	20 31 21	6cycles jump to & return from $2131 [user program]

			rts						;$2130	60			6cycles 
;------------------------------------

code_019
			ldy code_031			;$2131	ac fc 20	4cycles load from $20fc [user program]
			ldx code_021			;$2134	ae 22 21	4cycles load from $2122 [user program]
			lda code_032,y			;$2137	b9 49 21	4+cycles load from $2149 [user program]
			ora code_033+1,x		;$213a	1d 4f 21	4+cycles load from $214f [user program]
			sta code_034			;$213d	8d 23 21	4cycles store at $2123 [user program]
			lda code_021			;$2140	ad 22 21	4cycles load from $2122 [user program]
			eor #$01				;$2143	49 01		2cycles 
			sta code_021			;$2145	8d 22 21	4cycles store at $2122 [user program]
			rts						;$2148	60			6cycles 
;------------------------------------

code_032
			kil						;$2149	02			0cycles illegal opcode [$02]
			nop ZERO_ADRAY2_002		;$214a	04 06		3cycles 
			php						;$214c	08			3cycles 
			asl						;$214d	0a			2cycles 
code_033
			nop $1000				;$214e	0c 00 10	4cycles 
code_028
			dec code_035			;$2151	ce bf 21	6cycles store at $21bf [user program]
			bpl code_036			;$2154	10 0f		2+cycles conditional branch to $2165 [user program]

			lda #$02				;$2156	a9 02		2cycles 
			sta code_035			;$2158	8d bf 21	4cycles store at $21bf [user program]
			dec code_031			;$215b	ce fc 20	6cycles store at $20fc [user program]
			bpl code_036			;$215e	10 05		2+cycles conditional branch to $2165 [user program]

			lda #$05				;$2160	a9 05		2cycles 
			sta code_031			;$2162	8d fc 20	4cycles store at $20fc [user program]
code_036
			ldx code_031			;$2165	ae fc 20	4cycles load from $20fc [user program]
			lda $3f84,x				;$2168	bd 84 3f	4+cycles 
			sta code_037+1			;$216b	8d 1e 22	4cycles store at $221e [user program]
			lda $3f8a,x				;$216e	bd 8a 3f	4+cycles 
			sta code_038+2			;$2171	8d 1f 22	4cycles store at $221f [user program]
			lda $3f90,x				;$2174	bd 90 3f	4+cycles 
			sta code_039+1			;$2177	8d 24 22	4cycles store at $2224 [user program]
			lda $3f96,x				;$217a	bd 96 3f	4+cycles 
			sta code_040+2			;$217d	8d 25 22	4cycles store at $2225 [user program]
			dec code_041+1			;$2180	ce fd 20	6cycles store at $20fd [user program]
			bpl code_042			;$2183	10 39		2+cycles conditional branch to $21be [user program]

			lda #$07				;$2185	a9 07		2cycles 
			sta code_041+1			;$2187	8d fd 20	4cycles store at $20fd [user program]
			ldx #$00				;$218a	a2 00		2cycles 
code_051
			lda code_043+1,x		;$218c	bd 1a 21	4+cycles load from $211a [user program]
			beq code_044			;$218f	f0 28		2+cycles conditional branch to $21b9 [user program]

			dec code_045,x			;$2191	de fe 20	7cycles store at $20fe [user program]
			lda code_045,x			;$2194	bd fe 20	4+cycles load from $20fe [user program]
			cmp #$1c				;$2197	c9 1c		2cycles 
			bne code_046			;$2199	d0 05		2+cycles conditional branch to $21a0 [user program]

			lda #$01				;$219b	a9 01		2cycles 
			sta code_047,x			;$219d	9d 1b 21	5cycles store at $211b [user program]
code_046
			lda code_045,x			;$21a0	bd fe 20	4+cycles load from $20fe [user program]
			bpl code_044			;$21a3	10 14		2+cycles conditional branch to $21b9 [user program]

			lda #$22				;$21a5	a9 22		2cycles 
			sta code_045,x			;$21a7	9d fe 20	5cycles store at $20fe [user program]
			lda #$e8				;$21aa	a9 e8		2cycles 
			sta code_048,x			;$21ac	9d 05 21	5cycles store at $2105 [user program]
			lda #$00				;$21af	a9 00		2cycles 
			sta code_049,x			;$21b1	9d 0c 21	5cycles store at $210c [user program]
			lda #$01				;$21b4	a9 01		2cycles 
			sta code_050,x			;$21b6	9d 13 21	5cycles store at $2113 [user program]
code_044
			inx						;$21b9	e8			2cycles 
			cpx #$07				;$21ba	e0 07		2cycles 
			bne code_051			;$21bc	d0 ce		2+cycles conditional branch to $218c [user program]

code_042
			rts						;$21be	60			6cycles 
;------------------------------------

code_035
			slo (ZERO_D6510_003,x)	;$21bf	03 00		8cycles illegal opcode [$03]
code_030
			ldx #$00				;$21c1	a2 00		2cycles 
code_059
			stx code_052+1			;$21c3	8e 0c 22	4cycles store at $220c [user program]
			lda code_043+1,x		;$21c6	bd 1a 21	4+cycles load from $211a [user program]
			beq code_053			;$21c9	f0 40		2+cycles conditional branch to $220b [user program]

			lda code_045,x			;$21cb	bd fe 20	4+cycles load from $20fe [user program]
			sta code_054+1			;$21ce	8d 07 22	4cycles store at $2207 [user program]
			lda code_050,x			;$21d1	bd 13 21	4+cycles load from $2113 [user program]
			beq code_055			;$21d4	f0 1a		2+cycles conditional branch to $21f0 [user program]

			dec code_048,x			;$21d6	de 05 21	7cycles store at $2105 [user program]
			lda code_048,x			;$21d9	bd 05 21	4+cycles load from $2105 [user program]
			cmp #$ff				;$21dc	c9 ff		2cycles 
			bne code_055			;$21de	d0 10		2+cycles conditional branch to $21f0 [user program]

			dec code_049,x			;$21e0	de 0c 21	7cycles store at $210c [user program]
			bpl code_055			;$21e3	10 0b		2+cycles conditional branch to $21f0 [user program]

			lda #$00				;$21e5	a9 00		2cycles 
			sta code_050,x			;$21e7	9d 13 21	5cycles store at $2113 [user program]
			sta code_048,x			;$21ea	9d 05 21	5cycles store at $2105 [user program]
			sta code_049,x			;$21ed	9d 0c 21	5cycles store at $210c [user program]
code_055
			clc						;$21f0	18			2cycles 
			lda #$00				;$21f1	a9 00		2cycles 
			adc code_048,x			;$21f3	7d 05 21	4+cycles load from $2105 [user program]
			sta code_056+1			;$21f6	8d 02 22	4cycles store at $2202 [user program]
			lda #$35				;$21f9	a9 35		2cycles 
			adc code_049,x			;$21fb	7d 0c 21	4+cycles load from $210c [user program]
			sta code_057+2			;$21fe	8d 03 22	4cycles store at $2203 [user program]
code_056
code_057
			ldx KERNAL_VECIRQ_000	;$2201	ae ff ff	4cycles load from $ffff [Vector: IRQ]
			ldy #$00				;$2204	a0 00		2cycles 
code_054
			lda #$ff				;$2206	a9 ff		2cycles 
			jsr code_058			;$2208	20 13 22	6cycles jump to & return from $2213 [user program]

code_052
code_053
			ldx #$00				;$220b	a2 00		2cycles 
			inx						;$220d	e8			2cycles 
			cpx #$07				;$220e	e0 07		2cycles 
			bne code_059			;$2210	d0 b1		2+cycles conditional branch to $21c3 [user program]

			rts						;$2212	60			6cycles 
;------------------------------------

code_058
			sta code_060+1			;$2213	8d 59 22	4cycles store at $2259 [user program]
			stx code_061			;$2216	8e 92 22	4cycles store at $2292 [user program]
			txa						;$2219	8a			2cycles 
			and #$07				;$221a	29 07		2cycles 
			tax						;$221c	aa			2cycles 
code_037
code_038
			lda KERNAL_VECIRQ_000,x	;$221d	bd ff ff	4+cycles load from $ffff [Vector: IRQ]
			sta code_062+1			;$2220	8d 6a 22	4cycles store at $226a [user program]
code_039
code_040
			lda KERNAL_VECIRQ_000,x	;$2223	bd ff ff	4+cycles load from $ffff [Vector: IRQ]
			sta code_063+2			;$2226	8d 6b 22	4cycles store at $226b [user program]
			tya						;$2229	98			2cycles 
			lsr						;$222a	4a			2cycles 
			ror code_061			;$222b	6e 92 22	6cycles store at $2292 [user program]
			lsr						;$222e	4a			2cycles 
			ror code_061			;$222f	6e 92 22	6cycles store at $2292 [user program]
			lsr						;$2232	4a			2cycles 
			ror code_061			;$2233	6e 92 22	6cycles store at $2292 [user program]
			ldx code_021			;$2236	ae 22 21	4cycles load from $2122 [user program]
			lda code_064,x			;$2239	bd 93 22	4+cycles load from $2293 [user program]
			sta code_065+1			;$223c	8d 56 22	4cycles store at $2256 [user program]
			lda code_066+2,x		;$223f	bd 95 22	4+cycles load from $2295 [user program]
			sta code_067+2			;$2242	8d 57 22	4cycles store at $2257 [user program]
			lda code_068+1,x		;$2245	bd 97 22	4+cycles load from $2297 [user program]
			sta code_069+1			;$2248	8d 5e 22	4cycles store at $225e [user program]
			lda code_070,x			;$224b	bd 99 22	4+cycles load from $2299 [user program]
			sta code_071+2			;$224e	8d 5f 22	4cycles store at $225f [user program]
			ldx code_061			;$2251	ae 92 22	4cycles load from $2292 [user program]
			clc						;$2254	18			2cycles 
code_065
code_067
			lda KERNAL_VECIRQ_000,x	;$2255	bd ff ff	4+cycles load from $ffff [Vector: IRQ]
code_060
			adc #$00				;$2258	69 00		2cycles 
			sta code_072+1			;$225a	8d 6d 22	4cycles store at $226d [user program]
code_069
code_071
			lda KERNAL_VECIRQ_000,x	;$225d	bd ff ff	4+cycles load from $ffff [Vector: IRQ]
			adc #$00				;$2260	69 00		2cycles 
			sta code_073+2			;$2262	8d 6e 22	4cycles store at $226e [user program]
			ldy #$07				;$2265	a0 07		2cycles 
code_077
			ldx #$04				;$2267	a2 04		2cycles 
code_062
code_063
code_074
			lda KERNAL_VECIRQ_000,x	;$2269	bd ff ff	4+cycles load from $ffff [Vector: IRQ]
code_072
code_073
			sta KERNAL_VECIRQ_000,x	;$226c	9d ff ff	5cycles store at $ffff [Vector: IRQ]
			dex						;$226f	ca			2cycles 
			bpl code_074			;$2270	10 f7		2+cycles conditional branch to $2269 [user program]

			clc						;$2272	18			2cycles 
			lda code_062+1			;$2273	ad 6a 22	4cycles load from $226a [user program]
			adc #$05				;$2276	69 05		2cycles 
			sta code_062+1			;$2278	8d 6a 22	4cycles store at $226a [user program]
			bcc code_075			;$227b	90 03		2+cycles conditional branch to $2280 [user program]

			inc code_063+2			;$227d	ee 6b 22	6cycles store at $226b [user program]
code_075
			clc						;$2280	18			2cycles 
			lda code_072+1			;$2281	ad 6d 22	4cycles load from $226d [user program]
			adc #$28				;$2284	69 28		2cycles 
			sta code_072+1			;$2286	8d 6d 22	4cycles store at $226d [user program]
			bcc code_076			;$2289	90 03		2+cycles conditional branch to $228e [user program]

			inc code_073+2			;$228b	ee 6e 22	6cycles store at $226e [user program]
code_076
			dey						;$228e	88			2cycles 
			bpl code_077			;$228f	10 d6		2+cycles conditional branch to $2267 [user program]

			rts						;$2291	60			6cycles 
;------------------------------------

code_061
			brk						;$2292	00			7cycles 
;------------------------------------

code_064
code_066
			jmp $3680				;$2293	4c 80 36	3cycles jump
;------------------------------------

code_068
			rol ZERO_FACSGN_004,x	;$2296	36 66		6cycles store at $0066 [Floating point accumulator (FAC) #1 sign]
			txs						;$2298	9a			2cycles 
code_070
			rol ZERO_FRESPC_005,x	;$2299	36 36		6cycles store at $0036 [FRESPC, utility pointer for strings]
code_087
			brk						;$229b	00			7cycles 
;------------------------------------

			brk						;$229c	00			7cycles 
;------------------------------------

			brk						;$229d	00			7cycles 
;------------------------------------

			brk						;$229e	00			7cycles 
;------------------------------------

			brk						;$229f	00			7cycles 
;------------------------------------

			brk						;$22a0	00			7cycles 
;------------------------------------

			brk						;$22a1	00			7cycles 
;------------------------------------

			brk						;$22a2	00			7cycles 
;------------------------------------

code_079
			brk						;$22a3	00			7cycles 
;------------------------------------

			brk						;$22a4	00			7cycles 
;------------------------------------

			brk						;$22a5	00			7cycles 
;------------------------------------

			brk						;$22a6	00			7cycles 
;------------------------------------

			brk						;$22a7	00			7cycles 
;------------------------------------

			brk						;$22a8	00			7cycles 
;------------------------------------

			brk						;$22a9	00			7cycles 
;------------------------------------

			brk						;$22aa	00			7cycles 
;------------------------------------

code_081
			brk						;$22ab	00			7cycles 
;------------------------------------

			brk						;$22ac	00			7cycles 
;------------------------------------

			brk						;$22ad	00			7cycles 
;------------------------------------

			brk						;$22ae	00			7cycles 
;------------------------------------

			brk						;$22af	00			7cycles 
;------------------------------------

			brk						;$22b0	00			7cycles 
;------------------------------------

			brk						;$22b1	00			7cycles 
;------------------------------------

			brk						;$22b2	00			7cycles 
;------------------------------------

code_083
			brk						;$22b3	00			7cycles 
;------------------------------------

			brk						;$22b4	00			7cycles 
;------------------------------------

			brk						;$22b5	00			7cycles 
;------------------------------------

			brk						;$22b6	00			7cycles 
;------------------------------------

			brk						;$22b7	00			7cycles 
;------------------------------------

			brk						;$22b8	00			7cycles 
;------------------------------------

			brk						;$22b9	00			7cycles 
;------------------------------------

			brk						;$22ba	00			7cycles 
;------------------------------------

code_085
			brk						;$22bb	00			7cycles 
;------------------------------------

			brk						;$22bc	00			7cycles 
;------------------------------------

			brk						;$22bd	00			7cycles 
;------------------------------------

			brk						;$22be	00			7cycles 
;------------------------------------

			brk						;$22bf	00			7cycles 
;------------------------------------

			brk						;$22c0	00			7cycles 
;------------------------------------

			brk						;$22c1	00			7cycles 
;------------------------------------

			brk						;$22c2	00			7cycles 
;------------------------------------

code_005
			lda #$0f				;$22c3	a9 0f		2cycles 
			sta VIC_SPENA_001		;$22c5	8d 15 d0	4cycles store at $d015 [enable sprites, 1   on]
			lda #$ff				;$22c8	a9 ff		2cycles 
			sta VIC_SPMC_008		;$22ca	8d 1c d0	4cycles store at $d01c [sprite multicolor mode, 1   multicolor]
			lda #$ff				;$22cd	a9 ff		2cycles 
			sta VIC_YXPAND_009		;$22cf	8d 17 d0	4cycles store at $d017 [enlarge sprites vertical * 2]
			sta VIC_XXPAND_010		;$22d2	8d 1d d0	4cycles store at $d01d [enlarge sprites horizontal * 2]
			lda #$00				;$22d5	a9 00		2cycles 
			sta VIC_SPBGPR_011		;$22d7	8d 1b d0	4cycles store at $d01b [sprite/background priority, 1   sprite]
			lda #$05				;$22da	a9 05		2cycles 
			sta VIC_SPMC0_012		;$22dc	8d 25 d0	4cycles store at $d025 [sprite multicolor register 0]
			lda #$0d				;$22df	a9 0d		2cycles 
			sta VIC_SPMC1_013		;$22e1	8d 26 d0	4cycles store at $d026 [sprite multicolor register 1]
			rts						;$22e4	60			6cycles 
;------------------------------------

code_006
			ldx #$07				;$22e5	a2 07		2cycles 
code_088
			lda code_078,x			;$22e7	bd 11 23	4+cycles load from $2311 [user program]
			sta code_079,x			;$22ea	9d a3 22	5cycles store at $22a3 [user program]
			lda code_080,x			;$22ed	bd 19 23	4+cycles load from $2319 [user program]
			sta code_081,x			;$22f0	9d ab 22	5cycles store at $22ab [user program]
			lda code_082,x			;$22f3	bd 21 23	4+cycles load from $2321 [user program]
			sta code_083,x			;$22f6	9d b3 22	5cycles store at $22b3 [user program]
			lda code_084			;$22f9	ad 29 23	4cycles load from $2329 [user program]
			sta code_085,x			;$22fc	9d bb 22	5cycles store at $22bb [user program]
			lda code_086,x			;$22ff	bd 09 23	4+cycles load from $2309 [user program]
			sta code_087,x			;$2302	9d 9b 22	5cycles store at $229b [user program]
			dex						;$2305	ca			2cycles 
			bpl code_088			;$2306	10 df		2+cycles conditional branch to $22e7 [user program]

			rts						;$2308	60			6cycles 
;------------------------------------

code_086
			cpx #$e1				;$2309	e0 e1		2cycles 
			nop #$e3				;$230b	e2 e3		2cycles 
			cpx ZERO_LDTB1_006		;$230d	e4 e5		3cycles load from $00e5 [Screen line link table / temporary storage for editor; 25 bytes, one byte for each screen line]
			inc ZERO_LDTB1_007		;$230f	e6 e7		5cycles store at $00e7 [Screen line link table / temporary storage for editor; 25 bytes, one byte for each screen line]
code_078
			kil						;$2311	32			0cycles illegal opcode [$32]
			sre ZERO_FNADR2_008		;$2312	47 bc		5cycles illegal opcode [$47]
			cmp (ZERO_D6510_003,y)	;$2314	d1 00		5+cycles load from $0000 [6510 CPU's data direction I/O port register; 0 = input, 1 = output]
			brk						;$2316	00			7cycles 
;------------------------------------

			brk						;$2317	00			7cycles 
;------------------------------------

			brk						;$2318	00			7cycles 
;------------------------------------

code_080
			plp						;$2319	28			4cycles 
			plp						;$231a	28			4cycles 
			clc						;$231b	18			2cycles 
			clc						;$231c	18			2cycles 
			plp						;$231d	28			4cycles 
			plp						;$231e	28			4cycles 
			plp						;$231f	28			4cycles 
			plp						;$2320	28			4cycles 
code_082
			ora (ZERO_R6510_001,x)	;$2321	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
			brk						;$2323	00			7cycles 
;------------------------------------

			brk						;$2324	00			7cycles 
;------------------------------------

			ora (ZERO_R6510_001,x)	;$2325	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
			ora (ZERO_R6510_001,x)	;$2327	01 01		6cycles load from $0001 [6510 CPU's on-chip port register]
code_007
code_084
			slo (ZERO_RINONE_009,x)	;$2329	03 a9		8cycles illegal opcode [$03]
			brk						;$232b	00			7cycles 
;------------------------------------

			sta code_089			;$232c	8d 6a 23	4cycles store at $236a [user program]
			ldy #$00				;$232f	a0 00		2cycles 
			ldx #$00				;$2331	a2 00		2cycles 
code_092
			lda code_087,x			;$2333	bd 9b 22	4+cycles load from $229b [user program]
			sta $43f8,x				;$2336	9d f8 43	5cycles 
			sta $47f8,x				;$2339	9d f8 47	5cycles 
			lda code_085,x			;$233c	bd bb 22	4+cycles load from $22bb [user program]
			sta VIC_SP0COL_014,x	;$233f	9d 27 d0	5cycles store at $d027 [color of sprite 0]
			lda code_079,x			;$2342	bd a3 22	4+cycles load from $22a3 [user program]
			sta VIC_SP0Y_015,y		;$2345	99 01 d0	5cycles store at $d001 [sprite 0, Y position]
			lda code_081,x			;$2348	bd ab 22	4+cycles load from $22ab [user program]
			sta VIC_SP0X_016,y		;$234b	99 00 d0	5cycles store at $d000 [sprite 0, X position]
			lda code_083,x			;$234e	bd b3 22	4+cycles load from $22b3 [user program]
			beq code_090			;$2351	f0 09		2+cycles conditional branch to $235c [user program]

			lda code_089			;$2353	ad 6a 23	4cycles load from $236a [user program]
			ora code_091,x			;$2356	1d 6b 23	4+cycles load from $236b [user program]
			sta code_089			;$2359	8d 6a 23	4cycles store at $236a [user program]
code_090
			iny						;$235c	c8			2cycles 
			iny						;$235d	c8			2cycles 
			inx						;$235e	e8			2cycles 
			cpx #$08				;$235f	e0 08		2cycles 
			bne code_092			;$2361	d0 d0		2+cycles conditional branch to $2333 [user program]

			lda code_089			;$2363	ad 6a 23	4cycles load from $236a [user program]
			sta VIC_MSIGX_017		;$2366	8d 10 d0	4cycles store at $d010 [sprites 0/7, MSB X position]
			rts						;$2369	60			6cycles 
;------------------------------------

code_089
			brk						;$236a	00			7cycles 
;------------------------------------

code_091
			ora (ZERO_TEMP_010,x)	;$236b	01 02		6cycles load from $0002 [Unused]
			nop ZERO_ENDCHR_011		;$236d	04 08		3cycles 
			bpl code_093			;$236f	10 20		2+cycles conditional branch to $2391 [user program]

			rti						;$2371	40			6cycles 
;------------------------------------

			nop #$ea				;$2372	80 ea		2cycles 
			nop						;$2374	ea			2cycles 
			nop						;$2375	ea			2cycles 
			nop						;$2376	ea			2cycles 
			nop						;$2377	ea			2cycles 
			nop						;$2378	ea			2cycles 
			nop						;$2379	ea			2cycles 
			nop						;$237a	ea			2cycles 
			nop						;$237b	ea			2cycles 
			nop						;$237c	ea			2cycles 
			nop						;$237d	ea			2cycles 
			nop						;$237e	ea			2cycles 
			nop						;$237f	ea			2cycles 
			nop						;$2380	ea			2cycles 
			nop						;$2381	ea			2cycles 
			nop						;$2382	ea			2cycles 
			nop						;$2383	ea			2cycles 
			nop						;$2384	ea			2cycles 
			nop						;$2385	ea			2cycles 
			nop						;$2386	ea			2cycles 
			nop						;$2387	ea			2cycles 
			nop						;$2388	ea			2cycles 
			nop						;$2389	ea			2cycles 
			nop						;$238a	ea			2cycles 
			nop						;$238b	ea			2cycles 
			nop						;$238c	ea			2cycles 
			nop						;$238d	ea			2cycles 
			nop						;$238e	ea			2cycles 
			nop						;$238f	ea			2cycles 
			nop						;$2390	ea			2cycles 
code_093
			nop						;$2391	ea			2cycles 
			nop						;$2392	ea			2cycles 
			nop						;$2393	ea			2cycles 
			nop						;$2394	ea			2cycles 
			nop						;$2395	ea			2cycles 
			nop						;$2396	ea			2cycles 
			nop						;$2397	ea			2cycles 
			nop						;$2398	ea			2cycles 
			nop						;$2399	ea			2cycles 
			nop						;$239a	ea			2cycles 
			nop						;$239b	ea			2cycles 
			nop						;$239c	ea			2cycles 
			nop						;$239d	ea			2cycles 
			nop						;$239e	ea			2cycles 
			nop						;$239f	ea			2cycles 
			nop						;$23a0	ea			2cycles 
			nop						;$23a1	ea			2cycles 
			nop						;$23a2	ea			2cycles 
			nop						;$23a3	ea			2cycles 
			nop						;$23a4	ea			2cycles 
			nop						;$23a5	ea			2cycles 
			nop						;$23a6	ea			2cycles 
			nop						;$23a7	ea			2cycles 
			nop						;$23a8	ea			2cycles 
			nop						;$23a9	ea			2cycles 
			nop						;$23aa	ea			2cycles 
			nop						;$23ab	ea			2cycles 
			nop						;$23ac	ea			2cycles 
			nop						;$23ad	ea			2cycles 
			nop						;$23ae	ea			2cycles 
			nop						;$23af	ea			2cycles 
			nop						;$23b0	ea			2cycles 
			nop						;$23b1	ea			2cycles 
			nop						;$23b2	ea			2cycles 
			nop						;$23b3	ea			2cycles 
			nop						;$23b4	ea			2cycles 
			nop						;$23b5	ea			2cycles 
			nop						;$23b6	ea			2cycles 
			nop						;$23b7	ea			2cycles 
			nop						;$23b8	ea			2cycles 
			nop						;$23b9	ea			2cycles 
			nop						;$23ba	ea			2cycles 
			nop						;$23bb	ea			2cycles 
			nop						;$23bc	ea			2cycles 
			nop						;$23bd	ea			2cycles 
			nop						;$23be	ea			2cycles 
			nop						;$23bf	ea			2cycles 
			nop						;$23c0	ea			2cycles 
			nop						;$23c1	ea			2cycles 
			nop						;$23c2	ea			2cycles 
			nop						;$23c3	ea			2cycles 
			nop						;$23c4	ea			2cycles 
			nop						;$23c5	ea			2cycles 
			nop						;$23c6	ea			2cycles 
			nop						;$23c7	ea			2cycles 
			nop						;$23c8	ea			2cycles 
			nop						;$23c9	ea			2cycles 
			nop						;$23ca	ea			2cycles 
			nop						;$23cb	ea			2cycles 
			nop						;$23cc	ea			2cycles 
			nop						;$23cd	ea			2cycles 
			nop						;$23ce	ea			2cycles 
			nop						;$23cf	ea			2cycles 
			nop						;$23d0	ea			2cycles 
			nop						;$23d1	ea			2cycles 
			nop						;$23d2	ea			2cycles 
			nop						;$23d3	ea			2cycles 
			nop						;$23d4	ea			2cycles 
			nop						;$23d5	ea			2cycles 
			nop						;$23d6	ea			2cycles 
			nop						;$23d7	ea			2cycles 
			nop						;$23d8	ea			2cycles 
			nop						;$23d9	ea			2cycles 
			nop						;$23da	ea			2cycles 
			nop						;$23db	ea			2cycles 
			nop						;$23dc	ea			2cycles 
			nop						;$23dd	ea			2cycles 
			nop						;$23de	ea			2cycles 
			nop						;$23df	ea			2cycles 
			nop						;$23e0	ea			2cycles 
			nop						;$23e1	ea			2cycles 
			nop						;$23e2	ea			2cycles 
			nop						;$23e3	ea			2cycles 
			nop						;$23e4	ea			2cycles 
			nop						;$23e5	ea			2cycles 
			nop						;$23e6	ea			2cycles 
			nop						;$23e7	ea			2cycles 
			nop						;$23e8	ea			2cycles 
			nop						;$23e9	ea			2cycles 
			nop						;$23ea	ea			2cycles 
			nop						;$23eb	ea			2cycles 
			nop						;$23ec	ea			2cycles 
			nop						;$23ed	ea			2cycles 
			nop						;$23ee	ea			2cycles 
			nop						;$23ef	ea			2cycles 
			nop						;$23f0	ea			2cycles 
			nop						;$23f1	ea			2cycles 
			nop						;$23f2	ea			2cycles 
			nop						;$23f3	ea			2cycles 
			nop						;$23f4	ea			2cycles 
			nop						;$23f5	ea			2cycles 
			nop						;$23f6	ea			2cycles 
			nop						;$23f7	ea			2cycles 
			nop						;$23f8	ea			2cycles 
			nop						;$23f9	ea			2cycles 
			nop						;$23fa	ea			2cycles 
			nop						;$23fb	ea			2cycles 
			nop						;$23fc	ea			2cycles 
			nop						;$23fd	ea			2cycles 
			nop						;$23fe	ea			2cycles 
			nop						;$23ff	ea			2cycles 
code_008
			sei						;$2400	78			2cycles 
			lda #$35				;$2401	a9 35		2cycles 
			sta ZERO_R6510_001		;$2403	85 01		3cycles store at $0001 [6510 CPU's on-chip port register]
			lda #$7f				;$2405	a9 7f		2cycles 
			sta CIA1_CIAICR_000		;$2407	8d 0d dc	4cycles store at $dc0d [IRQ-register]
			sta CIA2_CI2ICR_001		;$240a	8d 0d dd	4cycles store at $dd0d [IRQ-register]
			lda CIA1_CIAICR_000		;$240d	ad 0d dc	4cycles load from $dc0d [IRQ-register]
			lda CIA2_CI2ICR_001		;$2410	ad 0d dd	4cycles load from $dd0d [IRQ-register]
			lda #$01				;$2413	a9 01		2cycles 
			sta VIC_IRQMASK_018		;$2415	8d 1a d0	4cycles store at $d01a [interrupt mask register]
			sta VIC_VICIRQ_019		;$2418	8d 19 d0	4cycles store at $d019 [interrupt register]
			lda VIC_SCROLY_000		;$241b	ad 11 d0	4cycles load from $d011 [controlregister 1]
			and #$7f				;$241e	29 7f		2cycles 
			sta VIC_SCROLY_000		;$2420	8d 11 d0	4cycles store at $d011 [controlregister 1]
			lda #$34				;$2423	a9 34		2cycles 
			sta VIC_RASTER_003		;$2425	8d 12 d0	4cycles store at $d012 [line to generate IRQ]
			lda #$34				;$2428	a9 34		2cycles 
			sta KERNAL_VECIRQ_002	;$242a	8d fe ff	4cycles store at $fffe [Vector: IRQ]
			lda #$24				;$242d	a9 24		2cycles 
			sta KERNAL_VECIRQ_000	;$242f	8d ff ff	4cycles store at $ffff [Vector: IRQ]
			cli						;$2432	58			2cycles 
			rts						;$2433	60			6cycles 
;------------------------------------

			sta code_094+1			;$2434	8d 72 24	4cycles store at $2472 [user program]
			stx code_095+1			;$2437	8e 74 24	4cycles store at $2474 [user program]
			sty code_096+1			;$243a	8c 76 24	4cycles store at $2476 [user program]
			dec VIC_VICIRQ_019		;$243d	ce 19 d0	6cycles store at $d019 [interrupt register]
			lda code_034			;$2440	ad 23 21	4cycles load from $2123 [user program]
			sta VIC_VMCSB_006		;$2443	8d 18 d0	4cycles store at $d018 [addresses of CHARROM and videomatrix]
			lda #$ff				;$2446	a9 ff		2cycles 
			sta VIC_SPENA_001		;$2448	8d 15 d0	4cycles store at $d015 [enable sprites, 1   on]
			ldx #$04				;$244b	a2 04		2cycles 
code_097
			dex						;$244d	ca			2cycles 
			bne code_097			;$244e	d0 fd		2+cycles conditional branch to $244d [user program]

			lda #$0d				;$2450	a9 0d		2cycles 
			sta VIC_BGCOL0_020		;$2452	8d 21 d0	4cycles store at $d021 [backgroundcolor 0]
			ldx #$09				;$2455	a2 09		2cycles 
code_098
			dex						;$2457	ca			2cycles 
			bpl code_098			;$2458	10 fd		2+cycles conditional branch to $2457 [user program]

			lda #$00				;$245a	a9 00		2cycles 
			sta VIC_BGCOL0_020		;$245c	8d 21 d0	4cycles store at $d021 [backgroundcolor 0]
			jsr $1003				;$245f	20 03 10	6cycles jump to & return from

			lda #$e6				;$2462	a9 e6		2cycles 
			sta VIC_RASTER_003		;$2464	8d 12 d0	4cycles store at $d012 [line to generate IRQ]
			lda #$78				;$2467	a9 78		2cycles 
			sta KERNAL_VECIRQ_002	;$2469	8d fe ff	4cycles store at $fffe [Vector: IRQ]
			lda #$24				;$246c	a9 24		2cycles 
			sta KERNAL_VECIRQ_000	;$246e	8d ff ff	4cycles store at $ffff [Vector: IRQ]
code_094
			lda #$00				;$2471	a9 00		2cycles 
code_095
			ldx #$00				;$2473	a2 00		2cycles 
code_096
			ldy #$00				;$2475	a0 00		2cycles 
			rti						;$2477	40			6cycles 
;------------------------------------

			sta code_099+1			;$2478	8d b3 24	4cycles store at $24b3 [user program]
			stx code_100+1			;$247b	8e b5 24	4cycles store at $24b5 [user program]
			sty code_101+1			;$247e	8c b7 24	4cycles store at $24b7 [user program]
			dec VIC_VICIRQ_019		;$2481	ce 19 d0	6cycles store at $d019 [interrupt register]
			ldx #$05				;$2484	a2 05		2cycles 
code_102
			dex						;$2486	ca			2cycles 
			bpl code_102			;$2487	10 fd		2+cycles conditional branch to $2486 [user program]

			lda #$0d				;$2489	a9 0d		2cycles 
			sta VIC_BGCOL0_020		;$248b	8d 21 d0	4cycles store at $d021 [backgroundcolor 0]
			ldx #$08				;$248e	a2 08		2cycles 
code_103
			dex						;$2490	ca			2cycles 
			bpl code_103			;$2491	10 fd		2+cycles conditional branch to $2490 [user program]

			lda #$05				;$2493	a9 05		2cycles 
			sta VIC_BGCOL0_020		;$2495	8d 21 d0	4cycles store at $d021 [backgroundcolor 0]
			lda VIC_SCROLX_007		;$2498	ad 16 d0	4cycles load from $d016 [controlregister2]
			and #$78				;$249b	29 78		2cycles 
			ora code_041+1			;$249d	0d fd 20	4cycles load from $20fd [user program]
			sta VIC_SCROLX_007		;$24a0	8d 16 d0	4cycles store at $d016 [controlregister2]
			lda #$f6				;$24a3	a9 f6		2cycles 
			sta VIC_RASTER_003		;$24a5	8d 12 d0	4cycles store at $d012 [line to generate IRQ]
			lda #$b9				;$24a8	a9 b9		2cycles 
			sta KERNAL_VECIRQ_002	;$24aa	8d fe ff	4cycles store at $fffe [Vector: IRQ]
			lda #$24				;$24ad	a9 24		2cycles 
			sta KERNAL_VECIRQ_000	;$24af	8d ff ff	4cycles store at $ffff [Vector: IRQ]
code_099
			lda #$00				;$24b2	a9 00		2cycles 
code_100
			ldx #$00				;$24b4	a2 00		2cycles 
code_101
			ldy #$00				;$24b6	a0 00		2cycles 
			rti						;$24b8	40			6cycles 
;------------------------------------

			sta code_104+1			;$24b9	8d ef 24	4cycles store at $24ef [user program]
			stx code_105+1			;$24bc	8e f1 24	4cycles store at $24f1 [user program]
			sty code_106+1			;$24bf	8c f3 24	4cycles store at $24f3 [user program]
			dec VIC_VICIRQ_019		;$24c2	ce 19 d0	6cycles store at $d019 [interrupt register]
			lda VIC_SCROLY_000		;$24c5	ad 11 d0	4cycles load from $d011 [controlregister 1]
			ora #$08				;$24c8	09 08		2cycles 
			sta VIC_SCROLY_000		;$24ca	8d 11 d0	4cycles store at $d011 [controlregister 1]
			ldx #$14				;$24cd	a2 14		2cycles 
code_107
			dex						;$24cf	ca			2cycles 
			bpl code_107			;$24d0	10 fd		2+cycles conditional branch to $24cf [user program]

			lda VIC_SCROLY_000		;$24d2	ad 11 d0	4cycles load from $d011 [controlregister 1]
			and #$f7				;$24d5	29 f7		2cycles 
			sta VIC_SCROLY_000		;$24d7	8d 11 d0	4cycles store at $d011 [controlregister 1]
			lda #$00				;$24da	a9 00		2cycles 
			sta VIC_SPENA_001		;$24dc	8d 15 d0	4cycles store at $d015 [enable sprites, 1   on]
			lda #$31				;$24df	a9 31		2cycles 
			sta VIC_RASTER_003		;$24e1	8d 12 d0	4cycles store at $d012 [line to generate IRQ]
			lda #$34				;$24e4	a9 34		2cycles 
			sta KERNAL_VECIRQ_002	;$24e6	8d fe ff	4cycles store at $fffe [Vector: IRQ]
			lda #$24				;$24e9	a9 24		2cycles 
			sta KERNAL_VECIRQ_000	;$24eb	8d ff ff	4cycles store at $ffff [Vector: IRQ]
code_104
			lda #$00				;$24ee	a9 00		2cycles 
code_105
			ldx #$00				;$24f0	a2 00		2cycles 
code_106
			ldy #$00				;$24f2	a0 00		2cycles 
			rti						;$24f4	40			6cycles 
;------------------------------------

			nop						;$24f5	ea			2cycles 
			nop						;$24f6	ea			2cycles 
			nop						;$24f7	ea			2cycles 
			nop						;$24f8	ea			2cycles 
			nop						;$24f9	ea			2cycles 
			nop						;$24fa	ea			2cycles 
			nop						;$24fb	ea			2cycles 
			nop						;$24fc	ea			2cycles 
			nop						;$24fd	ea			2cycles 
			nop						;$24fe	ea			2cycles 





labels:

code_000	= $2001	;user program
code_001	= $2006	;user program
code_002	= $20f4	;user program
code_003	= $206f	;user program
code_004	= $2070	;user program
code_005	= $22c3	;user program
code_006	= $22e5	;user program
code_007	= $232a	;user program
code_008	= $2400	;user program
code_009	= $2045	;user program
code_010	= $2124	;user program
code_011	= $2043	;user program
code_012	= $2052	;user program
code_013	= $2057	;user program
code_014	= $2064	;user program
code_015	= $20cc	;user program
code_016	= $20e0	;user program
code_017	= $20a1	;user program
code_018	= $2080	;user program
code_019	= $2131	;user program
code_020	= $20a5	;user program
code_021	= $2122	;user program
code_022	= $20c8	;user program
code_023	= $20c5	;user program
code_024	= $20ca	;user program
code_025	= $20c6	;user program
code_026	= $20d0	;user program
code_027	= $20e4	;user program
code_028	= $2151	;user program
code_029	= $20b5	;user program
code_030	= $21c1	;user program
code_031	= $20fc	;user program
code_032	= $2149	;user program
code_033	= $214f	;user program
code_034	= $2123	;user program
code_035	= $21bf	;user program
code_036	= $2165	;user program
code_037	= $221e	;user program
code_038	= $221f	;user program
code_039	= $2224	;user program
code_040	= $2225	;user program
code_041	= $20fd	;user program
code_042	= $21be	;user program
code_043	= $211a	;user program
code_044	= $21b9	;user program
code_045	= $20fe	;user program
code_046	= $21a0	;user program
code_047	= $211b	;user program
code_048	= $2105	;user program
code_049	= $210c	;user program
code_050	= $2113	;user program
code_051	= $218c	;user program
code_052	= $220c	;user program
code_053	= $220b	;user program
code_054	= $2207	;user program
code_055	= $21f0	;user program
code_056	= $2202	;user program
code_057	= $2203	;user program
code_058	= $2213	;user program
code_059	= $21c3	;user program
code_060	= $2259	;user program
code_061	= $2292	;user program
code_062	= $226a	;user program
code_063	= $226b	;user program
code_064	= $2293	;user program
code_065	= $2256	;user program
code_066	= $2295	;user program
code_067	= $2257	;user program
code_068	= $2297	;user program
code_069	= $225e	;user program
code_070	= $2299	;user program
code_071	= $225f	;user program
code_072	= $226d	;user program
code_073	= $226e	;user program
code_074	= $2269	;user program
code_075	= $2280	;user program
code_076	= $228e	;user program
code_077	= $2267	;user program
code_078	= $2311	;user program
code_079	= $22a3	;user program
code_080	= $2319	;user program
code_081	= $22ab	;user program
code_082	= $2321	;user program
code_083	= $22b3	;user program
code_084	= $2329	;user program
code_085	= $22bb	;user program
code_086	= $2309	;user program
code_087	= $229b	;user program
code_088	= $22e7	;user program
code_089	= $236a	;user program
code_090	= $235c	;user program
code_091	= $236b	;user program
code_092	= $2333	;user program
code_093	= $2391	;user program
code_094	= $2472	;user program
code_095	= $2474	;user program
code_096	= $2476	;user program
code_097	= $244d	;user program
code_098	= $2457	;user program
code_099	= $24b3	;user program
code_100	= $24b5	;user program
code_101	= $24b7	;user program
code_102	= $2486	;user program
code_103	= $2490	;user program
code_104	= $24ef	;user program
code_105	= $24f1	;user program
code_106	= $24f3	;user program
code_107	= $24cf	;user program
ZERO_CHARAC_000	= $0007	;Search character/temporary integer during INT, OR and AND
ZERO_R6510_001	= $0001	;6510 CPU's on-chip port register
ZERO_ADRAY2_002	= $0006	;pointing to 45969/$B391; a ROM routine for converting integer numbers to floating point format
ZERO_D6510_003	= $0000	;6510 CPU's data direction I/O port register; 0 = input, 1 = output
ZERO_FACSGN_004	= $0066	;Floating point accumulator (FAC) #1 sign
ZERO_FRESPC_005	= $0036	;FRESPC, utility pointer for strings
ZERO_LDTB1_006	= $00e5	;Screen line link table / temporary storage for editor; 25 bytes, one byte for each screen line
ZERO_LDTB1_007	= $00e7	;Screen line link table / temporary storage for editor; 25 bytes, one byte for each screen line
ZERO_FNADR2_008	= $00bc	;Current file name
ZERO_RINONE_009	= $00a9	;RS-232 start bit 0 = received, 144 = not received
ZERO_TEMP_010	= $0002	;Unused
ZERO_ENDCHR_011	= $0008	;Scan for quote character at end of string during tokenization of BASIC commands.
RAM_COLRAM_000	= $d800	;color RAM area for screen
RAM_COLRAM_001	= $d900	;color RAM area for screen
RAM_COLRAM_002	= $da00	;color RAM area for screen
RAM_COLRAM_003	= $dae8	;color RAM area for screen
VIC_SCROLY_000	= $d011	;controlregister 1
VIC_SPENA_001	= $d015	;enable sprites, 1   on
VIC_EXTCOL_002	= $d020	;border color
VIC_RASTER_003	= $d012	;line to generate IRQ
VIC_BGCOL1_004	= $d022	;backgroundcolor 1
VIC_BGCOL2_005	= $d023	;backgroundcolor 2
VIC_VMCSB_006	= $d018	;addresses of CHARROM and videomatrix
VIC_SCROLX_007	= $d016	;controlregister2
VIC_SPMC_008	= $d01c	;sprite multicolor mode, 1   multicolor
VIC_YXPAND_009	= $d017	;enlarge sprites vertical * 2
VIC_XXPAND_010	= $d01d	;enlarge sprites horizontal * 2
VIC_SPBGPR_011	= $d01b	;sprite/background priority, 1   sprite
VIC_SPMC0_012	= $d025	;sprite multicolor register 0
VIC_SPMC1_013	= $d026	;sprite multicolor register 1
VIC_SP0COL_014	= $d027	;color of sprite 0
VIC_SP0Y_015	= $d001	;sprite 0, Y position
VIC_SP0X_016	= $d000	;sprite 0, X position
VIC_MSIGX_017	= $d010	;sprites 0/7, MSB X position
VIC_IRQMASK_018	= $d01a	;interrupt mask register
VIC_VICIRQ_019	= $d019	;interrupt register
VIC_BGCOL0_020	= $d021	;backgroundcolor 0

